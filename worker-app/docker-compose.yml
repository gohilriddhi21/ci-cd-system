services:
  mongodb:
    container_name: mongodb
    image: mongo:latest
    ports:
      - 27017:27017
    volumes:
      - mongodb-data:/data/db
    networks:
      - worker-network
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - worker-network
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    container_name: minio
    image: minio/minio
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - minio-data:/data
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: password123
    command: server /data --console-address ":9001"
    networks:
      - worker-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 10s
      timeout: 5s
      retries: 5

  worker:
    container_name: worker
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      mongodb:
        condition: service_healthy
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      PROJECT_DIR: ${PWD}/local_artifacts
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./local_artifacts:/app/local_artifacts
    networks:
      - worker-network
    privileged: true
    restart: always

networks:
  worker-network:
    driver: bridge

volumes:
  mongodb-data:
    name: mongodb-data
    driver: local
  minio-data:
    name: minio-data
    driver: local
  rabbitmq-data:
    name: rabbitmq-data
    driver: local